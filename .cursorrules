- name: "Step 1: Project Setup"
  prompt: "「CursorRulesで作るレトロ育成ゲーム」のプロジェクトをセットアップします。`index.html`, `style.css`, `engine.js`, `rules.js` の4つのファイルを作成してください。"

- name: "Step 2: Create HTML Structure"
  prompt: "`index.html`を編集します。Google Fontsから'Press Start 2P'を読み込み、ゲームのタイトル、キャラクター（絵文字）表示エリア、ふきだし、ステータス、アクションボタンのパネルなど、画面の骨組みを配置してください。`rules.js`と`engine.js`をこの順で読み込むように設定してください。"

- name: "Step 3: Apply Retro CSS Design"
  prompt: "`style.css`を全面的に書き換えます。ゲームボーイ風のカラーパレットとレイアウト、ドットフォントの適用、丸いボタンのデザインなど、絵文字表示に特化したレトロゲームの雰囲気にしてください。"

- name: "Step 4: Define Game Rules in rules.js"
  prompt: |
    `rules.js`を作成し、ゲームのすべてのルールをYAML形式の文字列として`gameRulesYAML`という定数に代入します。以下の内容をコピーしてください。
    ```javascript
    // ゲームのルールを定義するJavaScriptファイル
    const gameRulesYAML = \`
    # ------------------------------------
    # 育成ゲームのルール設定
    # ------------------------------------
    # ゲームの基本設定
    game_title: "育成ゲーム"
    # ------------------------------------
    # キャラクターの定義
    # ------------------------------------
    characters:
      - id: "egg"
        name: "タマゴ"
        emoji: "🥚"
        evolve_to: "child"
        evolve_conditions:
          - type: "time"
            value: 10
      - id: "child"
        name: "こども"
        emoji: "🐣"
        evolutions:
          - to: "adult_angel"
            conditions:
              - {type: "parameter", target: "mood", value: 70}
              - {type: "time", value: 60}
          - to: "adult_devil"
            conditions:
              - {type: "time", value: 60}
      - id: "adult_angel"
        name: "てんし"
        emoji: "😇"
        evolutions:
          - to: "tomb"
            conditions:
              - {type: "time", value: 180}
      - id: "adult_devil"
        name: "あくま"
        emoji: "😈"
        evolutions:
          - to: "tomb"
            conditions:
              - {type: "time", value: 120}
      - id: "tomb"
        name: "おはか"
        emoji: "🪦"
        is_final_state: true
    # ------------------------------------
    # パラメータの定義
    # ------------------------------------
    parameters:
      - {id: "hunger", name: "おなか", max_value: 100, initial_value: 80, decrease_per_second: 1}
      - {id: "mood", name: "ごきげん", max_value: 100, initial_value: 50, decrease_per_second: 2}
    # ------------------------------------
    # プレイヤーのアクション（お世話ボタン）の定義
    # ------------------------------------
    actions:
      - id: "feed"
        name: "ごはん"
        message: "おいしい！"
        effects:
          - {target: "hunger", value: 30}
      - id: "play"
        name: "あそぶ"
        message: "たのしいな！"
        effects:
          - {target: "mood", value: 20}
    \`;
    ```

- name: "Step 5: Implement Game Engine"
  prompt: |
    `engine.js`にゲームのロジックを実装します。サウンドやファイルフェッチは不要です。
    - `rules.js`で定義されたグローバル変数`gameRulesYAML`を読み込んで解釈します。
    - 時間経過でパラメータが減少し、分岐条件に基づいてキャラクターが進化します。
    - お世話ボタンでパラメータが回復し、キャラクターがセリフをしゃべります。
    - 最終形態になるとゲームが終了し、「はじめから」ボタンでリスタートできます。

- name: "Step 6: Create README"
  prompt: "プロジェクトの`README.md`を作成します。特徴、遊び方（サーバー不要）、`rules.js`を使った改造方法などを記載してください。"

- name: "Step 7: Finalize"
  prompt: "全てのファイルが完成しました。ユーザーに`index.html`を直接ブラウザで開いて動作確認するよう案内し、プロジェクトを完了してください。" 